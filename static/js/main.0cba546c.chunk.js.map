{"version":3,"sources":["components/Profile/Profile.module.css","components/Dialogs/Dialogs.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Users/users.module.css","components/Dialogs/DialogItem/DialogsItem.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Posts.module.css","components/Header/Header.module.css","components/PreLoading/Preloading.module.css","components/Navbar/Navbar.module.css","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Settings/Settings.tsx","components/Music/Music.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","Redux/dialog_reducer.ts","components/Dialogs/DialogsItemContainer.tsx","components/Dialogs/Dialogs.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Posts.tsx","Redux/profile_reducer.ts","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","Redux/withRoute.tsx","components/Profile/ProfileContainer.tsx","Redux/user_reducer.ts","img/USERS.svg","components/Users/UsersP/Users.tsx","components/PreLoading/Preloading.tsx","components/Users/UsersContainer.tsx","App.tsx","Redux/rudux_Store.ts","index.tsx"],"names":["module","exports","Header","className","p","header","src","alt","Navbar","s","nav","item","to","activLink","News","Settings","props","Music","DialogItem","dialog","active","id","name","Message","messag","message","changeDialogPost","addDialogPost","initialState","dialogNick","messages","messageBody","dialogsReducer","state","action","type","value","newDialogPost","trim","concat","DialogsItemContainer","connect","store","dialogsPages","dispatch","updateNewMessageBody","changeDialogsPostAC","sendMessage","messagesElement","map","m","dialogs","itemDialogs","d","onChange","e","currentTarget","onClick","ProfileInfo","info","photoSmall","profilePage","photos","small","large","fullName","Posts","post","likescounte","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","userId","undefined","newPostText","addPostProfile","changePostProfile","setProfile","profileReducer","addNewPost","MyPostsContainer","updateText","addNewText","postElement","addText","Profile","content","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","router","ProfileContainer","axios","get","then","response","data","this","React","items","totalCount","error","currentPage","totalPageSize","isFetching","userReducer","user","followed","us","Users","pageArr","i","push","styles","activePages","notActivePage","page","upDateUsers","users","usersPhoto","USERS","changeUnFollow","changeFollow","status","Preloading","style","loader","UsersAPIContainer","changeFetching","respons","setUsers","follow","changePages","unFollow","UsersContainer","user_id","App","path","element","reducers","combineReducers","createStore","window","renderEnteerTree","ReactDOM","render","getState","bind","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.0cba546c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__2bVbl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__wEPyW\",\"active\":\"Dialogs_active__3Ir0j\",\"itemDialogs\":\"Dialogs_itemDialogs__1xG0x\",\"messages\":\"Dialogs_messages__1qLzh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ProfileInfo_info__33qwx\",\"photoSmall\":\"ProfileInfo_photoSmall__sihW0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"users_usersPhoto__g3Sqh\",\"activePages\":\"users_activePages__1Q9yI\",\"notActivePage\":\"users_notActivePage__2IePW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemDialogs\":\"DialogsItem_itemDialogs__20vU3\",\"active\":\"DialogsItem_active__1s7-B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"MyPosts_post__2Bqj9\",\"addText\":\"MyPosts_addText__1Lxto\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Posts_content__3o3pC\",\"item\":\"Posts_item__2YUVg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2eVZF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloading_loader__1ZZFm\",\"load1\":\"Preloading_load1__1kRSQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2jcuY\",\"item\":\"Navbar_item__1KvGe\",\"activLink\":\"Navbar_activLink__2jFm0\"};","import React from 'react';\r\nimport p from './Header.module.css';\r\nimport '../../App.css'\r\n\r\nexport const Header = () => {\r\n    return (\r\n    <header className={p.header}>\r\n        <img\r\n            src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQeCm48YLb7mh4rFyJNq202jtVys3xZlhMQNg&usqp=CAU\"\r\n            alt=\"\"/>\r\n    </header>);\r\n}","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <div className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/profile/\"} className={s.activLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/dialogs/\"} className={s.activLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/news/\"} className={s.activLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/music/\"} className={s.activLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/settings/\"} className={s.activLink}>Sattings</NavLink>\r\n            </div>\r\n            //\r\n\r\n            <div className={s.item}>\r\n                <NavLink to={\"/users/\"} className={s.activLink}>USERS</NavLink>\r\n            </div>\r\n\r\n        </div>);\r\n}\r\n","import React from \"react\";\r\n\r\nexport const News = () => {\r\n    return (\r\n        <div>\r\n            <h1>Test News Components</h1>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype PropsType = {\r\n}\r\nexport const Settings = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n            <h1>Test Settings</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\n\r\n\r\nexport const Music = () => {\r\n    return (\r\n        <h1>Test Music Components</h1>\r\n    )\r\n}","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport p from './DialogsItem.module.css'\r\n\r\ntype ItemProps = {\r\n    name: string;\r\n    id: number;\r\n}\r\nexport const DialogItem = (props: ItemProps) => {\r\n\r\n    return (\r\n        <div className={p.dialog + ' ' + p.active}>\r\n            <NavLink to={'/dialogs/' + props.id}> {props.name} </NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport p from './Message.module.css'\r\n\r\ntype Mess = {\r\n    message: string;\r\n}\r\nexport const Message = (props: Mess) => {\r\n    return (\r\n        <div className={p.messag}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\n","\r\nexport type TYPE_DISPATCH_CREATOR = string\r\ntype ActionPropsType = { type: TYPE_DISPATCH_CREATOR, value?: string }\r\ntype PostType = { id: number, message: string, likescounte: number }\r\ntype dialogType = { id: number, name: string }\r\ntype dialogNickType = Array<dialogType>\r\ntype messageType = { id: number, message: string }\r\ntype messagesType = Array<messageType>\r\ntype dialogsPagesType = { dialogNick: dialogNickType, messages: messagesType, messageBody: string }\r\ntype siteBarType = { id: number }\r\n\r\nconst changeDialogPost = 'changeDialogPost'\r\nconst addDialogPost = 'addDialogPost'\r\nexport const addDialogCreatorAC = () => ({type: addDialogPost})\r\nexport const changeDialogsPostAC = (value: string) => {\r\n    return ({type: changeDialogPost, value} as const )\r\n}\r\n\r\ntype InitialStateType = {\r\n    dialogNick: { id: number, name: string }[],\r\n    messages: { id: number, message: string }[]\r\n    messageBody: string\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    dialogNick: [\r\n        {id: 1, name: 'Anatoliy'},\r\n        {id: 2, name: 'Sergey'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Nikifor'},\r\n        {id: 5, name: 'Arsrniy'},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"I`am learn to React\"},\r\n    ],\r\n    messageBody: \"\"\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionPropsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case  changeDialogPost: {\r\n            return {\r\n                ...state,\r\n                messageBody: action.value ? action.value : ''\r\n            }\r\n        }\r\n            // if (action.value)\r\n            //     state.messageBody = action.value;\r\n            // return state;\r\n\r\n        case addDialogPost: {\r\n            let newDialogPost = {id: 3, message: state.messageBody.trim()}\r\n            return {\r\n                ...state,\r\n                messages: state.messages.concat(newDialogPost),\r\n                messageBody: ''\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default dialogsReducer","import {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/rudux_Store\";\r\nimport {addDialogCreatorAC, changeDialogsPostAC} from \"../../Redux/dialog_reducer\"\r\nimport React, {Dispatch} from \"react\";\r\n\r\n\r\nlet mapStateToProps = (store: AppStateType) => {\r\n    return ({\r\n        dialogNick: store.dialogsPages.dialogNick,\r\n        messages: store.dialogsPages.messages,\r\n        messageBody: store.dialogsPages.messageBody,\r\n    })\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n    return {\r\n        updateNewMessageBody: (value: string) => {\r\n            dispatch(changeDialogsPostAC(value))},\r\n        sendMessage: () => {\r\n            dispatch(addDialogCreatorAC())}\r\n    }\r\n}\r\n\r\nexport const DialogsItemContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)","import React, {ChangeEvent} from \"react\";\r\nimport p from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\n\r\ntype DialogNickType = { id: number, name: string }\r\ntype MessageType = { id: number, message: string }\r\n\r\ntype messagePost = {\r\n    dialogNick: DialogNickType[],\r\n    messages: MessageType[],\r\n    messageBody: string\r\n    updateNewMessageBody: (value: string) => void\r\n    sendMessage: () => void\r\n}\r\nexport const Dialogs: React.FC<messagePost> = (props) => {\r\n    const dialogsElements = () =>\r\n        props.dialogNick.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    const messagesElement = props.messages.map(m => <Message message={m.message}/>)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewMessageBody(e.currentTarget.value)\r\n    }\r\n    const addPost = () => props.sendMessage()\r\n\r\n    return (\r\n        <div className={p.dialogs}>\r\n            <div className={p.itemDialogs}>\r\n                {dialogsElements()}\r\n            </div>\r\n            <div className={p.messages}>\r\n                {messagesElement}\r\n                <div>\r\n                    <textarea\r\n                        value={props.messageBody}\r\n                        onChange={onChangeHandler}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        onClick={addPost}\r\n                    >add\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../Redux/profile_reducer\";\r\n\r\n\r\ntype ProfileInfoType = {profilePage: ProfileType}\r\nexport const ProfileInfo = (props: ProfileInfoType) => {\r\n    return (\r\n        <div>\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/7/7f/Istanbul_IMG_7257_1725.jpg\"\r\n                 alt=\"\"/>\r\n            <div  className={s.info}>\r\n               <img className={s.photoSmall} src={props.profilePage.photos.small} alt=\"картинка маленькая\"/>\r\n                <img className={s.photoSmall} src={props.profilePage.photos.large} alt=\"картинка большая\"/>\r\n               <div> {props.profilePage.fullName} </div>\r\n                Ava+discrip\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport p from './Posts.module.css';\r\n\r\ntype MyPostsMessage = {\r\n    message: string,\r\n    likescounte: number,\r\n}\r\n\r\n\r\nexport const Posts = (props: MyPostsMessage) => {\r\n    return (\r\n        <div className={p.post}>\r\n            <div className={p.item}>\r\n                <img\r\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOlaWqOUHlXgQBKHi5jFoXsPTmxDI6SjFVzA&usqp=CAU\"\r\n                    alt=\"\"/>\r\n                {props.message}\r\n                <div><span>like </span>{props.likescounte}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","export type PostType = { id: number, message: string, likescounte: number, }\r\nexport type ContactType = {\r\n    facebook: string | null,\r\n    website: string | null,\r\n    vk: string | null,\r\n    twitter: string | null,\r\n    instagram: string | null,\r\n    youtube: string | null,\r\n    github: string | null,\r\n    mainLink: string | null,\r\n}\r\nexport type PhotoProfileType = { small: string | undefined, \"large\": string | undefined,}\r\nexport type ProfileType = {\r\n    aboutMe: string | null,\r\n    contacts: ContactType\r\n    lookingForAJob: boolean | null,\r\n    lookingForAJobDescription: string | null,\r\n    fullName: string | null,\r\n    userId: number | null,\r\n    photos: PhotoProfileType,\r\n    post: PostType[],\r\n    newPostText: string, }\r\nexport type ForProfileServetType = {\r\n    aboutMe: string | null,\r\n    contacts: ContactType\r\n    lookingForAJob: boolean | null,\r\n    lookingForAJobDescription: string | null,\r\n    fullName: string | null,\r\n    userId: number,\r\n    photos: PhotoProfileType,\r\n}\r\nlet initialState: ProfileType = {\r\n    aboutMe: null,\r\n    contacts: <ContactType> {\r\n        facebook: null,\r\n        website: null,\r\n        vk: null,\r\n        twitter: null,\r\n        instagram: null,\r\n        youtube: null,\r\n        github: null,\r\n        mainLink: null,\r\n    },\r\n    lookingForAJob: true,\r\n    lookingForAJobDescription: null,\r\n    fullName: null,\r\n    userId: null,\r\n    photos:<PhotoProfileType> {\r\n        small: undefined,\r\n        large: undefined,\r\n    },\r\n    post: [\r\n        {id: 1, message: \"It's me. What are you doing?\", likescounte: 5},\r\n        {id: 2, message: \"I'am learn\", likescounte: 13},\r\n    ],\r\n    newPostText: '',\r\n}\r\n// let initialState: ProfileType = {\r\n//     aboutMe: \"я круто чувак 1001%\",\r\n//     contacts: <ContactType> {\r\n//         facebook: \"facebook.com\",\r\n//         website: null,\r\n//         vk: \"vk.com/dimych\",\r\n//         twitter: \"https://twitter.com/@sdf\",\r\n//         instagram: \"instagra.com/sds\",\r\n//         youtube: null,\r\n//         github: \"github.com\",\r\n//         mainLink: \"null\",\r\n//     },\r\n//     lookingForAJob: true,\r\n//     lookingForAJobDescription: \"не ищу, а дурачусь\",\r\n//     fullName: \"samurai dimych\",\r\n//     userId: 2,\r\n//     photos: {\r\n//         small: \"https://social-network.samuraijs.com/activecontent/images/users/2/user-small.jpg?v=0\",\r\n//         \"large\": \"https://social-network.samuraijs.com/activecontent/images/users/2/user.jpg?v=0\"\r\n//     },\r\n//     post: [\r\n//         {id: 1, message: \"It's me. What are you doing?\", likescounte: 5},\r\n//         {id: 2, message: \"I'am learn\", likescounte: 13},\r\n//     ],\r\n//     newPostText: '',\r\n// }\r\n\r\ntype ActionReducerType = AddPostProfileType | ChangePostProfileType | SetProfileType\r\nexport type AddPostProfileType = {type: 'addPost'}\r\nexport type ChangePostProfileType = {type: 'changePost', action: string}\r\nexport type SetProfileType = {type: 'SET_PROFILE', action: ForProfileServetType}\r\n\r\nexport const addPostProfile = (): AddPostProfileType => ({type: 'addPost'})\r\nexport const changePostProfile = (action: string):ChangePostProfileType => ({type: 'changePost', action})\r\nexport const setProfile = (action: ForProfileServetType):SetProfileType => ({type: 'SET_PROFILE', action})\r\n\r\nconst profileReducer = (state: ProfileType = initialState, action: ActionReducerType): ProfileType => {\r\n    switch (action.type) {\r\n        case 'changePost':\r\n            return {...state, newPostText: action.action};\r\n        case 'addPost': {\r\n            let addNewPost = {id: 6, message: state.newPostText, likescounte: 0}\r\n            if (state.newPostText.trim()) {\r\n                return {...state, post: [...state.post, addNewPost], newPostText: ''}\r\n            }\r\n            return state\r\n        }\r\n        case 'SET_PROFILE':\r\n            // debugger\r\n            return {...state,\r\n                aboutMe: action.action.aboutMe,\r\n                contacts: {...action.action.contacts},\r\n                lookingForAJob: action.action.lookingForAJob,\r\n                lookingForAJobDescription: action.action.lookingForAJobDescription,\r\n                fullName: action.action.fullName,\r\n                userId: action.action.userId,\r\n                photos: {...action.action.photos},\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default profileReducer","import {connect} from \"react-redux\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../Redux/rudux_Store\";\r\nimport {addPostProfile, changePostProfile} from \"../../../Redux/profile_reducer\";\r\nimport {Dispatch} from \"react\";\r\n\r\n\r\nexport const mapStateToProps = (store: AppStateType) => {\r\n    return {profilePage: store.profilePage}\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n    return {\r\n        updateText: (value: string) => {\r\n            dispatch(changePostProfile(value))\r\n        },\r\n        addNewText: () => {\r\n            dispatch(addPostProfile())\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {ChangeEvent} from 'react';\r\nimport p from './MyPosts.module.css';\r\nimport {Posts} from \"./Post/Posts\";\r\n\r\ntype PostType = {id: number, message: string, likescounte: number,}\r\n\r\ntype ProfilePropsType = {\r\n    profilePage: { post: PostType[], newPostText: string }\r\n    updateText: (value: string) => void\r\n    addNewText: () => void\r\n    // dispatch: (action: ActionPropsType) => void\r\n}\r\n\r\nexport const MyPosts = (props: ProfilePropsType) => {\r\n    const postElement = props.profilePage.post.map(p => <Posts message={p.message} likescounte={p.likescounte}/>)\r\n    // let NewPost = React.createRef<HTMLTextAreaElement>()\r\n    let addPost = () => {\r\n        props.addNewText()\r\n    }\r\n    const changeText = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateText(e.currentTarget.value)\r\n    }\r\n    return (<div>\r\n            <h3>My post</h3>\r\n            <div className={p.addText}>\r\n                <textarea\r\n                    // ref={NewPost}\r\n                    value={props.profilePage.newPostText}\r\n                    onChange={changeText}\r\n                > </textarea>\r\n                <div>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={p.post}>\r\n                {postElement}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport p from './Profile.module.css';\r\nimport '../../App.css'\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {MapPropsProfile} from \"./ProfileContainer\";\r\n\r\nexport const Profile = (props: MapPropsProfile) => {\r\n\r\n    return (\r\n        <div className={p.content}>\r\n            <ProfileInfo profilePage={props.profilePage}/>\r\n            <MyPostsContainer/>\r\n            {/*<MyPosts*/}\r\n            {/*    profilePage={props.profilePage}*/}\r\n            {/*    dispatch={props.dispatch}*/}\r\n\r\n            {/*/>*/}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nimport {\r\n    useLocation,\r\n    useNavigate,\r\n    useParams\r\n} from \"react-router-dom\";\r\n\r\nfunction withRouter(Component: any) {\r\n    function ComponentWithRouterProp(props: any) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\nexport default withRouter","import React from 'react';\r\nimport p from './Profile.module.css';\r\nimport '../../App.css'\r\nimport axios from 'axios';\r\nimport {Profile} from \"./Profile\";\r\nimport {AppStateType} from \"../../Redux/rudux_Store\";\r\nimport {\r\n    addPostProfile,\r\n    changePostProfile, ForProfileServetType,\r\n    ProfileType, setProfile\r\n} from \"../../Redux/profile_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport withRouter from \"../../Redux/withRoute\";\r\n\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component<MapPropsProfile> {\r\n    componentDidMount() {\r\n        axios.get('https://social-network.samuraijs.com/api/1.0/profile/2')\r\n            .then(response => {\r\n                this.props.setProfile(response.data)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={p.content}>\r\n                <Profile\r\n                    profilePage={this.props.profilePage}\r\n                    changePostProfile={this.props.changePostProfile}\r\n                    addPostProfile={addPostProfile}\r\n                    setProfile={setProfile}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport type MapStateProfileProps = {profilePage: ProfileType}\r\nexport type MapDispathToProps = {\r\n    addPostProfile: () => void\r\n    changePostProfile: (action: string) => void\r\n    setProfile: (action: ForProfileServetType) => void\r\n}\r\nexport type MapPropsProfile = MapStateProfileProps & MapDispathToProps\r\n\r\nexport const MapStateProfile = (store: AppStateType): MapStateProfileProps => {\r\n    return ({\r\n        profilePage: store.profilePage,\r\n    })\r\n}\r\n\r\nlet WithRouterProfile =  withRouter(ProfileContainer)\r\nexport default connect(MapStateProfile,{\r\n    changePostProfile,\r\n    addPostProfile,\r\n    setProfile,\r\n})(ProfileContainer)","export type ItemsType = {\r\n    name: string,\r\n    id: number,\r\n    photos: { small: string | null, large: string | null },\r\n    status: string | null,\r\n    followed: boolean,\r\n}\r\nexport type UseresType = {\r\n    items: ItemsType[]\r\n    totalCount: number,\r\n    error: string | null,\r\n    currentPage: number,\r\n    totalPageSize: number,\r\n    isFetching: boolean,\r\n}\r\ntype USER_AC_TYPE = FOLLOW_AC\r\n    | UN_FOLLOW_AC | CHANGE_PAGE_USERS_TYPE\r\n    | SET_USERS_TYPE |  CHANGE_FETCHING\r\n\r\ntype FOLLOW_AC = { type: 'FOLLOW_', id: number }\r\ntype UN_FOLLOW_AC = { type: 'UN_FOLLOW_', id: number }\r\ntype SET_USERS_TYPE = { type: \"SET_USERS\", items: UseresType }\r\ntype CHANGE_PAGE_USERS_TYPE = { type: \"CHANGE_USERS_PAGE\", currentPage: number }\r\ntype CHANGE_FETCHING = { type: \"CHANGE_Fetching\", isFetching: boolean }\r\n\r\nconst initialState: UseresType = {\r\n    items: [] as ItemsType[],\r\n    totalCount: 0,\r\n    error: null,\r\n    currentPage: 1,\r\n    totalPageSize: 10,\r\n    isFetching: false,\r\n}\r\n\r\nconst userReducer = (state: UseresType = initialState, action: USER_AC_TYPE): UseresType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW_':\r\n            return {\r\n                ...state,\r\n                items: state.items.map(user => {\r\n                    if (user.id === action.id) {\r\n                        return {...user, followed: true}\r\n                    }\r\n                    return user\r\n                })\r\n            };\r\n        case 'UN_FOLLOW_':\r\n            return {\r\n                ...state,\r\n                items: state.items.map(us => {\r\n                    if (us.id === action.id) {\r\n                        return {...us, followed: false}\r\n                    }\r\n                    return us\r\n                })\r\n            };\r\n        case \"SET_USERS\":\r\n            return {\r\n                ...state,\r\n                items: [...action.items.items],\r\n                totalCount: action.items.totalCount,\r\n                error: action.items.error\r\n            };\r\n        case \"CHANGE_USERS_PAGE\":\r\n            return {...state, currentPage: action.currentPage};\r\n        case \"CHANGE_Fetching\":\r\n            return {...state, isFetching: action.isFetching};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const follow = (user_id: number): FOLLOW_AC => ({type: 'FOLLOW_', id: user_id})\r\nexport const unFollow = (user_id: number): UN_FOLLOW_AC => ({type: 'UN_FOLLOW_', id: user_id})\r\nexport const setUsers = (items: UseresType): SET_USERS_TYPE => ({type: \"SET_USERS\", items})\r\nexport const changePages = (currentPage: number): CHANGE_PAGE_USERS_TYPE => ({type: \"CHANGE_USERS_PAGE\", currentPage})\r\nexport const changeFetching = (isFetching: boolean): CHANGE_FETCHING => ({type: \"CHANGE_Fetching\", isFetching})\r\n\r\nexport default userReducer","export default __webpack_public_path__ + \"static/media/USERS.ebe73738.svg\";","import React from \"react\";\r\nimport styles from '../users.module.css'\r\nimport USERS from \"../../../img/USERS.svg\";\r\n// import {UserPropsType} from \"../UsersContainer\";\r\nimport {UseresType} from \"../../../Redux/user_reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type UserPropsType = MapDispatchToPropsType & MapStateToPropsType\r\nexport type MapStateToPropsType = { users: UseresType, currentPage: number }\r\nexport type MapDispatchToPropsType = {\r\n    changeFollow: (id: number) => void\r\n    changeUnFollow: (id: number) => void\r\n    setUsers?: (items: UseresType) => void\r\n    changePages: (page: number) => void\r\n    upDateUsers?: (page: number) => void\r\n    changeFetching?: (fetching: boolean) => void\r\n}\r\n\r\nexport const Users = (props: UserPropsType) => {\r\n\r\n    let pageArr = []\r\n    let totalPages = 10\r\n    // Math.ceil(this.props.items.totalCount / this.props.items.totalPageSize)\r\n    //нужно научится выдавать юзеров порционно\r\n    for (let i = 1; i <= totalPages; i++) {\r\n        pageArr.push(i)\r\n    }\r\n    const onClockHandler = (page: number) => {\r\n        props.upDateUsers && props.upDateUsers(page)\r\n    }\r\n    return (\r\n        <div>\r\n            {pageArr.map(p => {\r\n                return (<span\r\n                    className={props.currentPage === p ?\r\n                        styles.activePages : styles.notActivePage}\r\n                    key={p}\r\n                    onClick={() => onClockHandler(p)}>{p + ' '}</span>)\r\n            })}\r\n            {/*<button onClick={this.showUsers}> Show users </button>*/}\r\n            {\r\n                props.users.items.map(us => <div key={us.id}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile'}>\r\n                        <img className={styles.usersPhoto}\r\n                             src={us.photos.small != null ? us.photos.small : USERS} alt=\"\"/>\r\n                        </NavLink>\r\n                        </div>\r\n                    <div>\r\n                        {us.followed ? <button onClick={() => props.changeUnFollow(us.id)}>Follow</button>\r\n                            : <button onClick={() => props.changeFollow(us.id)}>Unfollow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n                    <span>\r\n                    <div>{us.name}</div>\r\n                    <div>{us.status}</div>\r\n                </span>\r\n                    <span>\r\n                    <div>{'us.location.city'}</div>\r\n                    <div>{'us.location.country'}</div>\r\n                </span>\r\n                </div>)\r\n            }</div>\r\n    )\r\n}","import React from \"react\";\r\nimport style from './Preloading.module.css'\r\n\r\nexport const Preloading = () => {\r\n    return <div className={style.loader}>Loading...</div>\r\n}","import React from \"react\";\r\nimport {AppStateType} from \"../../Redux/rudux_Store\";\r\nimport {follow, setUsers, unFollow, UseresType, changePages, changeFetching} from \"../../Redux/user_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport {Users} from \"./UsersP/Users\";\r\nimport {Preloading} from \"../PreLoading/Preloading\";\r\nexport type OwnProps = {}\r\nexport type UserPropsType = MapDispatchToPropsType & MapStateToPropsType\r\nexport type MapStateToPropsType = {users: UseresType, currentPage: number}\r\nexport type MapDispatchToPropsType = {\r\n    follow: (id: number) => void\r\n    unFollow: (id: number) => void\r\n    setUsers: (items: UseresType) => void\r\n    changePages: (page: number) => void\r\n    changeFetching?: (fetching: boolean) => void\r\n}\r\nconst mapStateToProps = (store: AppStateType): MapStateToPropsType => {\r\n    return ({\r\n        users: store.users,\r\n        currentPage: store.users.currentPage,\r\n    })\r\n}\r\nclass UsersAPIContainer extends React.Component<UserPropsType> {\r\n\r\n    componentDidMount() {\r\n        axios.get<UseresType>\r\n        (`https://social-network.samuraijs.com/api/1.0/users?page=\r\n        ${this.props.currentPage}\r\n        &count=${this.props.users.totalPageSize}`)\r\n            .then(respons => {\r\n                this.props.setUsers && this.props.setUsers(respons.data)\r\n            })\r\n    }\r\n\r\n    upDateUsers = (page: number) => {\r\n        this.props.changeFetching&&this.props.changeFetching(true)\r\n        axios.get<UseresType>\r\n        (`https://social-network.samuraijs.com/api/1.0/users?page=\r\n        ${page}\r\n        &count=${this.props.users.totalPageSize}`)\r\n            .then(respons => {\r\n                this.props.changeFetching&&this.props.changeFetching(false)\r\n                this.props.setUsers && this.props.setUsers(respons.data)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.users.isFetching ? < Preloading/> :\r\n                <Users\r\n                    users={this.props.users}\r\n                    currentPage={this.props.currentPage}\r\n                    changeFollow={this.props.follow}\r\n                    changePages={this.props.changePages}\r\n                    changeUnFollow={this.props.unFollow}\r\n                    upDateUsers={this.upDateUsers}\r\n                />\r\n                }\r\n        </>\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect<MapStateToPropsType,MapDispatchToPropsType, OwnProps, AppStateType >(mapStateToProps, {\r\n    follow,\r\n    unFollow,\r\n    setUsers,\r\n    changePages,\r\n    changeFetching,\r\n})(UsersAPIContainer)","import React from 'react';\r\nimport './App.css';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport {News} from \"./components/News/News\";\r\nimport {Settings} from \"./components/Settings/Settings\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport {Music} from \"./components/Music/Music\";\r\nimport {AppStateType} from \"./Redux/rudux_Store\";\r\nimport {DialogsItemContainer} from \"./components/Dialogs/DialogsItemContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport { UsersContainer } from './components/Users/UsersContainer';\r\n\r\nexport type TYPE_DISPATCH_CREATOR = string\r\n\r\ntype ActionPropsType = {\r\n    type: TYPE_DISPATCH_CREATOR,\r\n    value?: string\r\n}\r\ntype AppDataType = {\r\n    state: AppStateType\r\n    dispatch: (action: ActionPropsType) => void\r\n}\r\n\r\nconst App = (props: AppDataType) => {\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className='app-wrapper'>\r\n                <Header/>\r\n                <Navbar/>\r\n                <div className={'app-wrapper-content'}>\r\n\r\n                    <Routes>\r\n                        <Route path='/profile'\r\n                               element={<ProfileContainer/>}/>\r\n                        <Route path='/dialogs'\r\n                               element={<DialogsItemContainer/>}>\r\n                            <Route path='/dialogs:id'\r\n                                   element={<DialogsItemContainer/>}/>\r\n                        </Route>\r\n                        <Route path='/users' element={<UsersContainer/>}/>\r\n                        <Route path='/news' element={<News/>}/>\r\n                        <Route path='/settings' element={<Settings/>}/>\r\n                        <Route path='/music' element={<Music/>}/>\r\n                    </Routes>\r\n                </div>\r\n\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n// <Route path=\"profile\" element={<Profile/>}/>","import {combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile_reducer\";\r\nimport dialogsReducer from \"./dialog_reducer\";\r\nimport userReducer from \"./user_reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPages: dialogsReducer,\r\n    users: userReducer,\r\n    //siteBar: () => {}\r\n})\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nconst store = createStore(reducers)\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from \"./Redux/rudux_Store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nexport const renderEnteerTree = () => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n        <App\r\n            state={store.getState()}\r\n            dispatch={store.dispatch.bind(store)}\r\n        />,\r\n        </Provider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrenderEnteerTree()\r\nstore.subscribe(renderEnteerTree)\r\n\r\n// store.subscribe(renderEnteerTree)\r\n\r\n\r\n\r\n"],"sourceRoot":""}